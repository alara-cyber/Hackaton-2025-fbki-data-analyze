from aiogram import Bot, Dispatcher, F, types
import asyncio
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import random

bot = Bot(token="8445500986:AAEDgJAo32xYZPd2Qo4uELDSCDseSZsezNk")
dp = Dispatcher()

breeds_in_order = [
    "Американская акита", "Американский булли", "Американский бульдог", "Английский бульдог", "Английский мастиф",
    "Английский пойнтер", "Английский сеттер", "Басенджи", "Бельгийская овчарка", "Бернский зенненхунд",
    "Бигль", "Бишон фризе", "Бладхаунд", "Боксер", "Бордер-колли", "Бордоский дог", "Босерон", "Бостон-терьер",
    "Бриар", "Бурбуль", "Веймаранер", "Вельш-корги кардиган", "Вельштерьер", "Венгерская выжла", "Гаванский бишон",
    "Далматин", "Доберман", "Дратхаар", "Золотистый ретривер", "Ирландский сеттер", "Йоркширский терьер",
    "Кавказская овчарка", "Китайская хохлатая собака", "Комондор", "Курцхаар", "Леонбергер",
    "Маремма-абруццкая овчарка", "Миттельшнауцер", "Московская сторожевая собака", "Неаполитанский мастиф",
    "Немецкая овчарка", "Немецкий дог", "Немецкий пинчер", "Немецкий ягдтерьер", "Ньюфаундленд",
    "Пиренейская горная собака", "Питбуль", "Ризеншнауцер", "Родезийский риджбек", "Ротвейлер",
    "Русская цветная болонка", "Русский черный терьер", "Сенбернар", "Стаффордширский бультерьер", "Тоса-ину",
    "Чехословацкий влчак", "Шелти", "Ши-тцу", "Энтлебухер зенненхунд", "Эстонская гончая", "Японский шпиц"
]

dog_breeds = {
    "Американская акита": {"Вес минимальный": 32.0, "Рост минимальный": 60.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 3, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 1, "Охранные качества": 4},
    "Американский булли": {"Вес минимальный": 30.0, "Рост минимальный": 40.0, "Продолжительность жизни минимальная": 8.0, "Агрессивность": 3, "Активность": 3, "Дрессировка": 3, "Дружелюбность": 5, "Шум": 1, "Охранные качества": 3},
    "Американский бульдог": {"Вес минимальный": 27.0, "Рост минимальный": 52.0, "Продолжительность жизни минимальная": 11.0, "Агрессивность": 2, "Активность": 4, "Дрессировка": 4, "Дружелюбность": 3, "Шум": 3, "Охранные качества": 3},
    "Английский бульдог": {"Вес минимальный": 22.0, "Рост минимальный": 40.0, "Продолжительность жизни минимальная": 7.0, "Агрессивность": 3, "Активность": 2, "Дрессировка": 3, "Дружелюбность": 5, "Шум": 3, "Охранные качества": 5},
    "Английский мастиф": {"Вес минимальный": 68.0, "Рост минимальный": 69.0, "Продолжительность жизни минимальная": 9.0, "Агрессивность": 3, "Активность": 2, "Дрессировка": 3, "Дружелюбность": 5, "Шум": 1, "Охранные качества": 5},
    "Английский пойнтер": {"Вес минимальный": 20.0, "Рост минимальный": 61.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 2, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 4, "Шум": 2, "Охранные качества": 4},
    "Английский сеттер": {"Вес минимальный": 20.0, "Рост минимальный": 61.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 1, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 2, "Охранные качества": 3},
    "Басенджи": {"Вес минимальный": 9.5, "Рост минимальный": 40.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 2, "Активность": 3, "Дрессировка": 3, "Дружелюбность": 4, "Шум": 2, "Охранные качества": 4},
    "Бельгийская овчарка": {"Вес минимальный": 20.0, "Рост минимальный": 56.0, "Продолжительность жизни минимальная": None, "Агрессивность": 3, "Активность": 5, "Дрессировка": 5, "Дружелюбность": 5, "Шум": 3, "Охранные качества": 5},
    "Бернский зенненхунд": {"Вес минимальный": 36.0, "Рост минимальный": 58.0, "Продолжительность жизни минимальная": 8.0, "Агрессивность": 2, "Активность": 4, "Дрессировка": 5, "Дружелюбность": 5, "Шум": 3, "Охранные качества": 5},
    "Бигль": {"Вес минимальный": 8.0, "Рост минимальный": 33.0, "Продолжительность жизни минимальная": 11.0, "Агрессивность": 2, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 4, "Шум": 3, "Охранные качества": 4},
    "Бишон фризе": {"Вес минимальный": 2.5, "Рост минимальный": 25.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 1, "Активность": 3, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 3, "Охранные качества": 3},
    "Бладхаунд": {"Вес минимальный": 40.0, "Рост минимальный": 58.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 3, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 5, "Шум": 2, "Охранные качества": 3},
    "Боксер": {"Вес минимальный": 25.0, "Рост минимальный": 53.0, "Продолжительность жизни минимальная": 11.0, "Агрессивность": 3, "Активность": 5, "Дрессировка": 3, "Дружелюбность": 4, "Шум": 3, "Охранные качества": 5},
    "Бордер-колли": {"Вес минимальный": 15.0, "Рост минимальный": 47.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 1, "Активность": 5, "Дрессировка": 5, "Дружелюбность": 5, "Шум": 2, "Охранные качества": 5},
    "Бордоский дог": {"Вес минимальный": 45.0, "Рост минимальный": 58.0, "Продолжительность жизни минимальная": 9.0, "Агрессивность": 1, "Активность": 3, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 2, "Охранные качества": 5},
    "Босерон": {"Вес минимальный": 30.0, "Рост минимальный": 61.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 1, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 2, "Охранные качества": 5},
    "Бостон-терьер": {"Вес минимальный": 3.0, "Рост минимальный": 23.0, "Продолжительность жизни минимальная": 11.0, "Агрессивность": 3, "Активность": 5, "Дрессировка": 3, "Дружелюbность": 5, "Шум": 3, "Охранные качества": 3},
    "Бриар": {"Вес минимальный": 25.0, "Рост минимальный": 56.0, "Продолжительность жизни минимальная": 11.0, "Агрессивность": 3, "Активность": 5, "Дрессировка": 5, "Дружелюбность": 4, "Шум": 3, "Охранные качества": 5},
    "Бурбуль": {"Вес минимальный": 50.0, "Рост минимальный": 59.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 2, "Активность": 3, "Дрессировка": 3, "Дружелюбность": 4, "Шум": 1, "Охранные качества": 4},
    "Веймаранер": {"Вес минимальный": 23.0, "Рост минимальный": 57.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 2, "Активность": 5, "Дрессировка": 5, "Дружелюбность": 5, "Шум": 2, "Охранные качества": 3},
    "Вельш-корги кардиган": {"Вес минимальный": 12.0, "Рост минимальный": 25.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 1, "Активность": 5, "Дрессировка": 5, "Дружелюбность": 5, "Шум": 3, "Охранные качества": 5},
    "Вельштерьер": {"Вес минимальный": 9.0, "Рост минимальный": 39.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 1, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 4, "Шум": 2, "Охранные качества": 5},
    "Венгерская выжла": {"Вес минимальный": 18.0, "Рост минимальный": 52.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 1, "Активность": 5, "Дрессировка": 5, "Дружелюбность": 3, "Шум": 3, "Охранные качества": 4},
    "Гаванский бишон": {"Вес минимальный": 3.0, "Рост минимальный": 23.0, "Продолжительность жизни минимальная": 13.0, "Агрессивность": 1, "Активность": 4, "Дрессировка": 5, "Дружелюбность": 5, "Шум": 3, "Охранные качества": 3},
    "Далматин": {"Вес минимальный": 24.0, "Рост минимальный": 54.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 1, "Активность": 5, "Дрессировка": 4, "Дружелюбность": 5, "Шум": 2, "Охранные качества": 3},
    "Доберман": {"Вес минимальный": 32.0, "Рост минимальный": 63.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 3, "Активность": 5, "Дрессировка": 5, "Дружелюбность": 3, "Шум": 3, "Охранные качества": 5},
    "Дратхаар": {"Вес минимальный": 23.0, "Рост минимальный": 57.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 2, "Активность": 5, "Дрессировка": 5, "Дружелюбность": 4, "Шум": 2, "Охранные качества": 5},
    "Золотистый ретривер": {"Вес минимальный": 25.0, "Рост минимальный": 51.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 1, "Активность": 3, "Дрессировка": 5, "Дружелюбность": 5, "Шум": 3, "Охранные качества": 3},
    "Ирландский сеттер": {"Вес минимальный": 27.0, "Рост минимальный": 55.0, "Продолжительность жизни минимальная": None, "Агрессивность": 1, "Активность": 5, "Дрессировка": 3, "Дружелюбность": 5, "Шум": 2, "Охранные качества": 3},
    "Йоркширский терьер": {"Вес минимальный": 2.0, "Рост минимальный": 15.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 1, "Активность": 3, "Дрессировка": 3, "Дружелюбность": 4, "Шум": 2, "Охранные качества": 4},
    "Кавказская овчарка": {"Вес минимальный": 45.0, "Рост минимальный": 64.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 3, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 3, "Охранные качества": 5},
    "Китайская хохлатая собака": {"Вес минимальный": 2.3, "Рост минимальный": 23.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 1, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 3, "Охранные качества": 3},
    "Комондор": {"Вес минимальный": 40.0, "Рост минимальный": 65.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 2, "Активность": 3, "Дрессировка": 4, "Дружелюбность": 3, "Шум": 3, "Охранные качества": 5},
    "Курцхаар": {"Вес минимальный": 20.0, "Рост минимальный": 58.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 2, "Активность": 5, "Дрессировка": 5, "Дружелюбность": 5, "Шум": 2, "Охранные качества": 4},
    "Леонбергер": {"Вес минимальный": 45.0, "Рост минимальный": 61.0, "Продолжительность жизни минимальная": 9.0, "Агрессивность": 1, "Активность": 3, "Дрессировка": 3, "Дружелюбность": 5, "Шум": 1, "Охранные качества": 5},
    "Маремма-абруццкая овчарка": {"Вес минимальный": 30.0, "Рост минимальный": 60.0, "Продолжительность жизни минимальная": 11.0, "Агрессивность": 2, "Активность": 5, "Дрессировка": 4, "Дружелюбность": 3, "Шум": 2, "Охранные качества": 5},
    "Миттельшnaуцер": {"Вес минимальный": 17.0, "Рост минимальный": 45.0, "Продолжительность жизни минимальная": 13.0, "Агрессивность": 2, "Активность": 5, "Дрессировка": 4, "Дружелюбность": 4, "Шум": 3, "Охранные качества": 5},
    "Московская сторожевая собака": {"Вес минимальный": 45.0, "Рост минимальный": 65.0, "Продолжительность жизни минимальная": 9.0, "Агрессивность": 2, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 4, "Шум": 2, "Охранные качества": 5},
    "Неаполитанский мастиф": {"Вес минимальный": 50.0, "Рост минимальный": 60.0, "Продолжительность жизни минимальная": 9.0, "Агрессивность": 2, "Активность": 2, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 2, "Охранные качества": 5},
    "Немецкая овчарка": {"Вес минимальный": 22.0, "Рост минимальный": 55.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 3, "Активность": 5, "Дрессировка": 5, "Дружелюбность": 5, "Шум": 3, "Охранные качества": 5},
    "Немецкий дог": {"Вес минимальный": 50.0, "Рост минимальный": 72.0, "Продолжительность жизни минимальная": 8.0, "Агрессивность": 2, "Активность": 3, "Дрессировка": 3, "Дружелюбность": 4, "Шум": 3, "Охранные качества": 5},
    "Немецкий пинчер": {"Вес минимальный": 13.0, "Рост минимальный": 45.0, "Продолжительность жизни минимальная": 13.0, "Агрессивность": 3, "Активность": 5, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 3, "Охранные качества": 5},
    "Немецкий ягдтерьер": {"Вес минимальный": 7.5, "Рост минимальный": 33.0, "Продолжительность жизни минимальная": 9.0, "Агрессивность": 3, "Активность": 5, "Дрессировка": 4, "Дружелюбность": 3, "Шум": 3, "Охранные качества": 3},
    "Ньюфаундленд": {"Вес минимальный": 54.0, "Рост минимальный": 66.0, "Продолжительность жизни минимальная": 9.0, "Агрессивность": 1, "Активность": 2, "Дрессировка": 4, "Дружелюбность": 5, "Шум": 1, "Охранные качества": 3},
    "Пиренейская горная собака": {"Вес минимальный": None, "Рост минимальный": 65.0, "Продолжительность жизни минимальная": None, "Агрессивность": 2, "Активность": 5, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 2, "Охранные качества": 5},
    "Питбуль": {"Вес минимальный": 14.0, "Рост минимальный": 43.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 2, "Активность": 3, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 1, "Охранные качества": 5},
    "Ризеншнауцер": {"Вес минимальный": 35.0, "Рост минимальный": 60.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 2, "Активность": 4, "Дрессировка": 4, "Дружелюбность": 4, "Шум": 2, "Охранные качества": 5},
    "Родезийский риджбек": {"Вес минимальный": 32.0, "Рост минимальный": 61.0, "Продолжительность жизни минимальная": None, "Агрессивность": 2, "Активность": 5, "Дрессировка": 3, "Дружелюбность": 4, "Шум": 1, "Охранные качества": 3},
    "Ротвейлер": {"Вес минимальный": 45.0, "Рост минимальный": 56.0, "Продолжительность жизни минимальная": 11.0, "Агрессивность": 3, "Активность": 4, "Дрессировка": 5, "Дружелюбность": 3, "Шум": 3, "Охранные качества": 5},
    "Русская цветная болонка": {"Вес минимальный": 3.0, "Рост минимальный": 20.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 1, "Активность": 3, "Дрессировка": 4, "Дружелюбность": 5, "Шум": 2, "Охранные качества": 4},
    "Русский черный терьер": {"Вес минимальный": 45.0, "Рост минимальный": 64.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 1, "Активность": 5, "Дрессировка": 4, "Дружелюбность": 4, "Шум": 1, "Охранные качества": 5},
    "Сенбернар": {"Вес минимальный": 70.0, "Рост минимальный": 65.0, "Продолжительность жизни минимальная": 9.0, "Агрессивность": 1, "Активность": 2, "Дрессировка": 3, "Дружелюбность": 5, "Шум": 3, "Охранные качества": 5},
    "Стаффордширский бультерьер": {"Вес минимальный": 11.0, "Рост минимальный": 35.5, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 3, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 4, "Шум": 2, "Охранные качества": 3},
    "Тоса-ину": {"Вес минимальный": 45.0, "Рост минимальный": 55.0, "Продолжительность жизни минимальная": 8.0, "Агрессивность": 3, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 2, "Охранные качества": 4},
    "Чехословацкий влчак": {"Вес минимальный": 20.0, "Рост минимальный": 60.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 3, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 3, "Шум": 2, "Охранные качества": 5},
    "Шелти": {"Вес минимальный": 6.8, "Рост минимальный": 32.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 1, "Активность": 5, "Дрессировка": 4, "Дружелюбность": 4, "Шум": 2, "Охранные качества": 5},
    "Ши-тцу": {"Вес минимальный": 4.0, "Рост минимальный": 27.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 1, "Активность": 2, "Дрессировка": 3, "Дружелюбность": 4, "Шум": 2, "Охранные качества": 4},
    "Энтлебухер зенненхунд": {"Вес минимальный": 25.0, "Рост минимальный": 42.0, "Продолжительность жизни минимальная": None, "Агрессивность": 2, "Активность": 4, "Дрессировка": 3, "Дружелюбность": 5, "Шум": 3, "Охранные качества": 5},
    "Эстонская гончая": {"Вес минимальный": 10.0, "Рост минимальный": 42.0, "Продолжительность жизни минимальная": 12.0, "Агрессивность": 1, "Активность": 4, "Дрессировка": 4, "Дружелюбность": 4, "Шум": 2, "Охранные качества": 3},
    "Японский шпиц": {"Вес минимальный": 5.0, "Рост минимальный": 28.0, "Продолжительность жизни минимальная": 10.0, "Агрессивность": 1, "Активность": 4, "Дрессировка": 4, "Дружелюбность": 5, "Шум": 2, "Охранные качества": 4}
}

current_position = 0

@dp.message(Command('start'))
async def main(message):
    user_name = message.chat.first_name

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="📚Все породы", callback_data="1"),
        InlineKeyboardButton(text="🔍Поиск породы", callback_data="2")
    )
    builder.row(
        InlineKeyboardButton(text="🎲Случайная порода", callback_data="3"),
        InlineKeyboardButton(text="ℹ️О боте", callback_data="4")
    )

    await message.answer(f'🤚Привет {user_name}!\nЭтот чат бот поможет тебе\nнайти породу собаки\nили посмотреть обширный список\nпород с их характеристиками!🐶', reply_markup=builder.as_markup())

async def display_breed(callback):
    breed_name = breeds_in_order[current_position]
    breed_info = dog_breeds[breed_name]

    text = f"🐕 <b>{breed_name}</b>\n\n"
    text += f"<b>Вес:</b> {breed_info['Вес минимальный']} кг\n"
    text += f"<b>Рост:</b> {breed_info['Рост минимальный']} см\n"
    if breed_info['Продолжительность жизни минимальная']:
        text += f"<b>Продолжительность жизни:</b> {breed_info['Продолжительность жизни минимальная']} лет\n"
    text += f"<b>Агрессивность:</b> {breed_info['Агрессивность']}/5\n"
    text += f"<b>Активность:</b> {breed_info['Активность']}/5\n"
    text += f"<b>Дрессировка:</b> {breed_info['Дрессировка']}/5\n"
    text += f"<b>Дружелюбность:</b> {breed_info['Дружелюбность']}/5\n"
    text += f"<b>Шум:</b> {breed_info['Шум']}/5\n"
    text += f"<b>Охранные качества:</b> {breed_info['Охранные качества']}/5\n\n"
    text += f"Порода {current_position + 1} из {len(breeds_in_order)}"

    builder = InlineKeyboardBuilder()

    if current_position > 0:
        builder.add(InlineKeyboardButton(text="⬅️ Назад", callback_data="prev_breed"))
    if current_position < len(breeds_in_order) - 1:
        builder.add(InlineKeyboardButton(text="Вперед ➡️", callback_data="next_breed"))
    builder.row(InlineKeyboardButton(text="🔙 Назад в меню", callback_data="back"))

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())

@dp.callback_query(F.data == "1")
async def callback(callback):
    global current_position
    current_position = 0
    await display_breed(callback)

@dp.callback_query(F.data == "3")
async def random_breed(callback):
    random_breed_name = random.choice(breeds_in_order)
    breed_info = dog_breeds[random_breed_name]

    text = f"🎲 <b>Случайная порода:</b>\n\n"
    text += f"🐕 <b>{random_breed_name}</b>\n\n"
    text += f"<b>Вес:</b> {breed_info['Вес минимальный']} кг\n"
    text += f"<b>Рост:</b> {breed_info['Рост минимальный']} см\n"
    if breed_info['Продолжительность жизни минимальная']:
        text += f"<b>Продолжительность жизни:</b> {breed_info['Продолжительность жизни минимальная']} лет\n"
    text += f"<b>Агрессивность:</b> {breed_info['Агрессивность']}/5\n"
    text += f"<b>Активность:</b> {breed_info['Активность']}/5\n"
    text += f"<b>Дрессировка:</b> {breed_info['Дрессировка']}/5\n"
    text += f"<b>Дружелюбность:</b> {breed_info['Дружелюбность']}/5\n"
    text += f"<b>Шум:</b> {breed_info['Шум']}/5\n"
    text += f"<b>Охранные качества:</b> {breed_info['Охранные качества']}/5\n\n"
    text += f"✨ Попробуйте ещё раз!"

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="🎲 Ещё случайная", callback_data="3"),
    )
    builder.row(InlineKeyboardButton(text="🔙 Назад в меню", callback_data="back"))

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data == "2")
async def search_mode(callback):
    text = "🔍 <b>Режим поиска</b>\n\n"
    text += "Напиши название породы собаки"

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="🔙 Назад в меню", callback_data="back"))

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await callback.answer()

@dp.message(F.text)
async def handle_search(message: types.Message):
    if message.text.startswith('/'):
        return

    user_text = message.text.strip().lower()

    found_breed = None
    for breed_name in breeds_in_order:
        if user_text == breed_name.lower():
            found_breed = breed_name
            break

    if found_breed:
        breed_info = dog_breeds[found_breed]

        text = f"🐕 <b>{found_breed}</b>\n\n"
        text += f"<b>Вес:</b> {breed_info['Вес минимальный']} кг\n"
        text += f"<b>Рост:</b> {breed_info['Рост минимальный']} см\n"
        if breed_info['Продолжительность жизни минимальная']:
            text += f"<b>Продолжительность жизни:</b> {breed_info['Продолжительность жизни минимальная']} лет\n"
        text += f"<b>Агрессивность:</b> {breed_info['Агрессивность']}/5\n"
        text += f"<b>Активность:</b> {breed_info['Активность']}/5\n"
        text += f"<b>Дрессировка:</b> {breed_info['Дрессировка']}/5\n"
        text += f"<b>Дружелюбность:</b> {breed_info['Дружелюбность']}/5\n"
        text += f"<b>Шум:</b> {breed_info['Шум']}/5\n"
        text += f"<b>Охранные качества:</b> {breed_info['Охранные качества']}/5"

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="🔍 Новый поиск", callback_data="2"))
        builder.row(InlineKeyboardButton(text="🔙 В меню", callback_data="back"))

        await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())

    else:
        text = "❌ <b>Порода не найдена</b>\n\n"
        text += "Попробуй написать точное название породы"

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="🔍 Попробовать снова", callback_data="2"))
        builder.row(InlineKeyboardButton(text="🔙 Назад в меню", callback_data="back"))

        await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())

@dp.callback_query(F.data == "4")
async def callback(callback):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="🔙 Назад в меню", callback_data="back"))
    await callback.message.edit_text('<b>Этот чат бот разработан для хакатона "Вкатись в ИТ"</b>',parse_mode="HTML",reply_markup=builder.as_markup())

@dp.callback_query(F.data == "next_breed")
async def next_breed(callback):
    global current_position
    if current_position < len(breeds_in_order) - 1:
        current_position += 1
        await display_breed(callback)

@dp.callback_query(F.data == "prev_breed")
async def prev_breed(callback):
    global current_position
    if current_position > 0:
        current_position -= 1
        await display_breed(callback)

@dp.callback_query(F.data == "back")
async def back(callback):
    await main(callback.message)

if __name__=="__main__":
    asyncio.run(dp.start_polling(bot))